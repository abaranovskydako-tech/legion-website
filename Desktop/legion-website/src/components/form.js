/**
 * Form Component - –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Ñ–æ—Ä–º—ã –∑–∞—Ö–≤–∞—Ç–∞ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –∫–æ–Ω–≤–µ—Ä—Å–∏–∏
 * –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ñ–æ—Ä–º–∞ —Å –ø–æ–ª–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞, —Ä–∞–∑–º–µ—â–µ–Ω–Ω–∞—è –≤—ã—à–µ —Å–≥–∏–±–∞
 */
class Form {
  constructor(container, options = {}) {
    this.container = container;
    this.options = {
      title: options.title || '–ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª –∑–∞ 3 —á–∞—Å–∞',
      subtitle: options.subtitle || '–û—Å—Ç–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –º—ã –ø–µ—Ä–µ–∑–≤–æ–Ω–∏–º –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç',
      buttonText: options.buttonText || '–ñ–¥—É –∑–≤–æ–Ω–∫–∞',
      placeholder: options.placeholder || '+7 (___) ___-__-__',
      ...options
    };
    
    this.init();
  }

  init() {
    this.render();
    this.bindEvents();
  }

  render() {
    // –°–æ–∑–¥–∞–µ–º HTML –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ñ–æ—Ä–º—ã
    this.container.innerHTML = `
      <div class="form-capture" data-component="form-capture">
        <div class="form-capture__content">
          <div class="form-capture__header">
            <h3 class="form-capture__title">${this.options.title}</h3>
            <p class="form-capture__subtitle">${this.options.subtitle}</p>
          </div>
          
          <form class="form-capture__form" novalidate>
            <div class="form-group">
              <div class="phone-input-wrapper">
                <input 
                  type="tel" 
                  name="phone" 
                  class="form-input phone-input" 
                  placeholder="${this.options.placeholder}" 
                  inputmode="tel" 
                  required
                  autocomplete="tel"
                />
                <div class="phone-input-icon">üì±</div>
              </div>
            </div>
            
            <button type="submit" class="btn btn-primary btn-full form-capture__submit">
              ${this.options.buttonText}
            </button>
            
            <small class="form-note">
              –ë–µ–∑ —Å–ø–∞–º–∞. –¢–æ–ª—å–∫–æ –ø–æ –¥–µ–ª—É.
            </small>
          </form>
          
          <!-- –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã -->
          <div class="form-capture__triggers">
            <div class="trigger-item">
              <div class="trigger-icon">‚ö°</div>
              <span>–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç –∑–∞ 72 —á–∞—Å–∞</span>
            </div>
            <div class="trigger-item">
              <div class="trigger-icon">‚úÖ</div>
              <span>–í—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤–∫–ª—é—á–µ–Ω—ã</span>
            </div>
            <div class="trigger-item">
              <div class="trigger-icon">üîÑ</div>
              <span>24/7 –ø–æ–¥–¥–µ—Ä–∂–∫–∞</span>
            </div>
          </div>
        </div>
      </div>
    `;
  }

  bindEvents() {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
    this.container.addEventListener('submit', (e) => {
      if (e.target.matches('.form-capture__form')) {
        e.preventDefault();
        this.handleFormSubmit(e.target);
      }
    });

    // –ú–∞—Å–∫–∞ –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    this.setupPhoneMask();
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    this.setupRealTimeValidation();
  }

  setupPhoneMask() {
    const phoneInput = this.container.querySelector('.phone-input');
    if (!phoneInput) return;

    // –ü—Ä–æ—Å—Ç–∞—è –º–∞—Å–∫–∞ –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ –Ω–æ–º–µ—Ä–∞
    phoneInput.addEventListener('input', (e) => {
      let value = e.target.value.replace(/\D/g, '');
      
      if (value.length > 0) {
        if (value.length <= 1) {
          value = '+7 (' + value;
        } else if (value.length <= 4) {
          value = '+7 (' + value.substring(1, 4);
        } else if (value.length <= 7) {
          value = '+7 (' + value.substring(1, 4) + ') ' + value.substring(4, 7);
        } else if (value.length <= 9) {
          value = '+7 (' + value.substring(1, 4) + ') ' + value.substring(4, 7) + '-' + value.substring(7, 9);
        } else {
          value = '+7 (' + value.substring(1, 4) + ') ' + value.substring(4, 7) + '-' + value.substring(7, 9) + '-' + value.substring(9, 11);
        }
      }
      
      e.target.value = value;
    });
  }

  setupRealTimeValidation() {
    const phoneInput = this.container.querySelector('.phone-input');
    const submitBtn = this.container.querySelector('.form-capture__submit');
    
    if (!phoneInput || !submitBtn) return;

    phoneInput.addEventListener('input', () => {
      const isValid = this.validatePhone(phoneInput.value);
      
      if (isValid) {
        phoneInput.classList.remove('error');
        phoneInput.classList.add('valid');
        submitBtn.disabled = false;
        submitBtn.classList.remove('btn-disabled');
      } else {
        phoneInput.classList.remove('valid');
        phoneInput.classList.add('error');
        submitBtn.disabled = true;
        submitBtn.classList.add('btn-disabled');
      }
    });
  }

  validatePhone(phone) {
    // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
    const digits = phone.replace(/\D/g, '');
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–º–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 7 –∏ –∏–º–µ–µ—Ç 11 —Ü–∏—Ñ—Ä
    return digits.length === 11 && digits.startsWith('7');
  }

  handleFormSubmit(form) {
    const formData = new FormData(form);
    const phone = formData.get('phone');

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!this.validatePhone(phone)) {
      this.showError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞');
      return;
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
    this.showLoading();

    // –ò–º–∏—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    setTimeout(() => {
      this.saveLead({ phone, source: 'form-capture', timestamp: new Date().toISOString() });
      this.showSuccess();
    }, 1500);
  }

  showLoading() {
    const submitBtn = this.container.querySelector('.form-capture__submit');
    if (submitBtn) {
      submitBtn.innerHTML = '<span class="loading-spinner"></span> –û—Ç–ø—Ä–∞–≤–ª—è–µ–º...';
      submitBtn.disabled = true;
    }
  }

  showError(message) {
    // –£–±–∏—Ä–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ—à–∏–±–∫–∏
    this.clearMessages();
    
    const errorDiv = document.createElement('div');
    errorDiv.className = 'form-error';
    errorDiv.textContent = message;
    
    const form = this.container.querySelector('.form-capture__form');
    form.insertBefore(errorDiv, form.querySelector('.form-note'));
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–±–∏—Ä–∞–µ–º –æ—à–∏–±–∫—É —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
      if (errorDiv.parentNode) {
        errorDiv.remove();
      }
    }, 5000);
  }

  showSuccess() {
    // –£–±–∏—Ä–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    this.clearMessages();
    
    const successDiv = document.createElement('div');
    successDiv.className = 'form-success';
    successDiv.innerHTML = `
      <div class="success-icon">‚úÖ</div>
      <div class="success-text">
        <h4>–°–ø–∞—Å–∏–±–æ!</h4>
        <p>–ú—ã –ø–µ—Ä–µ–∑–≤–æ–Ω–∏–º –≤–∞–º –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç</p>
      </div>
    `;
    
    const form = this.container.querySelector('.form-capture__form');
    form.insertBefore(successDiv, form.querySelector('.form-note'));
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É
    form.reset();
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
    const submitBtn = this.container.querySelector('.form-capture__submit');
    if (submitBtn) {
      submitBtn.innerHTML = this.options.buttonText;
      submitBtn.disabled = false;
    }
    
    // –£–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    const phoneInput = this.container.querySelector('.phone-input');
    if (phoneInput) {
      phoneInput.classList.remove('valid', 'error');
    }
  }

  clearMessages() {
    const messages = this.container.querySelectorAll('.form-error, .form-success');
    messages.forEach(msg => msg.remove());
  }

  saveLead(data) {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage (–∏–º–∏—Ç–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä)
    const leads = JSON.parse(localStorage.getItem('leads') || '[]');
    leads.push(data);
    localStorage.setItem('leads', JSON.stringify(data));
    
    console.log('Form capture lead saved:', data);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    if (typeof gtag !== 'undefined') {
      gtag('event', 'form_submit', {
        'event_category': 'lead_generation',
        'event_label': 'form_capture',
        'value': 1
      });
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if (typeof module !== 'undefined' && module.exports) {
  module.exports = Form;
} else {
  window.Form = Form;
}
